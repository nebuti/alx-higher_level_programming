The ``100-matrix_mul`` module
=================================

Using ``matrix_mul``


>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

>>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
[[7, 10], [15, 22]]
>>> print(matrix_mul([[1, 2], [3, 4]], [[1, 'A'], [3, 4]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    raise TypeError('m_b should contain only integers or floats')
TypeError: m_b should contain only integers or floats
>>> print(matrix_mul([[1, 'b'], [3, 4]], [[1, 2], [3, 4]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    raise TypeError('m_a should contain only integers or floats')
TypeError: m_a should contain only integers or floats
>>> print(matrix_mul([[1, 'b'], []], [[1, 2], [3, 4]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    raise TypeError('m_a should contain only integers or floats')
TypeError: m_a should contain only integers or floats

>>> print(matrix_mul([[1, 2], []], [[1, 2], [3, 4]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    raise TypeError('each row of m_a must should be of the same size')
TypeError: each row of m_a must should be of the same size
>>> print(matrix_mul([[], []], [[], []]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    raise ValueError('m_a and m_b can\'t be multiplied')
ValueError: m_a and m_b can't be multiplied
>>> print(matrix_mul([[], []], [[], [1, 2]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    raise TypeError('each row of m_b must should be of the same size')
TypeError: each row of m_b must should be of the same size
>>> print(matrix_mul([[], []], [[3, 4], [1, 2]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    raise ValueError('m_a and m_b can\'t be multiplied')
ValueError: m_a and m_b can't be multiplied
